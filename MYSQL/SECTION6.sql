-- DELIMITER
DELIMITER #

SELECT * FROM VIEW_RELAT#

-- PROCEDURES
DELIMITER #

CREATE PROCEDURE ACCOUNT()
BEGIN
      SELECT 10 / 2 AS ACCOUNT;
END
#

DELIMITER ;

CALL ACCOUNT();

DROP PROCEDURE ACCOUNT;

DELIMITER #

CREATE PROCEDURE ACCOUNT(NUMBER1 INT, NUMBER2 INT)
BEGIN
      SELECT NUMBER1 * NUMBER2 AS ACCOUNT;
END
#

DELIMITER ;

CALL ACCOUNT(4,2);
CALL ACCOUNT(1,2);
CALL ACCOUNT(5,2);
CALL ACCOUNT(2,6);

CREATE DATABASE BUSINESS2_2;

USE BUSINESS2_2;

CREATE TABLE COURSES (
      IDCOURSE INT PRIMARY KEY AUTO_INCREMENT,
      NAME VARCHAR(100) NOT NULL,
      HOURS INT(3) NOT NULL,
      PRICE FLOAT(10,2) NOT NULL
);


INSERT INTO COURSES VALUES(NULL,"JAVA",30,500.00);
INSERT INTO COURSES VALUES(NULL,"FUNDAMENTOS DE BANCOS DE DADOS",40,700.00);

SELECT * FROM COURSES;

DELIMITER #

CREATE PROCEDURE PROCOURSES (PNAME VARCHAR(100), PHOUR INT(3), PPRICE FLOAT(10,2))
BEGIN
      INSERT INTO COURSES VALUES (NULL, PNAME, PHOUR, PPRICE);
END
#

DELIMITER ;

-- ERRO COM INSERT, COLOQUEI S EM PHOUR
DROP PROCEDURE PROCOURSES;

CALL PROCOURSES("BI SQL SERVER", 35, 3000.00);
CALL PROCOURSES("POWER BI",20,1000.00);
CALL PROCOURSES("TABLEAU",30,1200.00);


-- CRIAR UMA PROCEDURE PARA CONSULTAR CURSOS
DELIMITER #
CREATE PROCEDURE PROCONSULT()
BEGIN
      SELECT IDCOURSE, NAME, HOURS, PRICE
      FROM COURSES;
END #

DELIMITER ;

-- BUSINESS2
-- IDS E EMAIL DAS MULHERES QUE MOREM NO CENTRO DO 
-- RIO DE JANEIRO E NAO TENHAM CELULAR
USE BUSINESS2;

DELIMITER #
CREATE PROCEDURE PBUSI2()
BEGIN
      SELECT C.IDCLIENT, C.EMAIL, C.GENDER, 
                  A.DISTRICT, 
                        P.TYPE, P.NUMBER
      FROM CLIENT C 
      INNER JOIN ADDRESS A 
      ON C.IDCLIENT=A.F_IDCLIENT
      INNER JOIN PHONE P
      ON C.IDCLIENT=P.F_IDCLIENT
      WHERE C.GENDER="F";
END #

DELIMITER ;
-- OUTRO ERRO, TIVE QUE REDUZIR AS ESPECIFICAÇÕES 
-- PARA O PROCED FUNCIONAR
DROP PROCEDURE PBUSI2;


-- A29 FUNÇÕES DE AGREGAÇÃO NUMÉRICAS
CREATE TABLE SELLERS (
      IDSELLER INT PRIMARY KEY AUTO_INCREMENT,
      NAME VARCHAR(100),
      GENDER CHAR(1),
      JANUARY FLOAT(10,2),
      FEBRUARY FLOAT(10,2),
      MARCH FLOAT(10,2)
);

INSERT INTO SELLERS VALUES(NULL,'CARLOS','M',76234.78,88346.87,5756.90);
INSERT INTO SELLERS VALUES(NULL,'MARIA','F',5865.78,6768.87,4467.90);
INSERT INTO SELLERS VALUES(NULL,'ANTONIO','M',78769.78,6685.87,6664.90);
INSERT INTO SELLERS VALUES(NULL,'CLARA','F',5779.78,446886.87,8965.90);
INSERT INTO SELLERS VALUES(NULL,'ANDERSON','M',676545.78,77544.87,578665.90);
INSERT INTO SELLERS VALUES(NULL,'IVONE','F',57789.78,44774.87,68665.90);
INSERT INTO SELLERS VALUES(NULL,'JOAO','M',4785.78,66478.87,6887.90);
INSERT INTO SELLERS VALUES(NULL,'CELIA','F',89667.78,57654.87,5755.90);

-- VALOR MÁXIMO DE UMA COLUNA
SELECT MAX(FEBRUARY) AS MAIOR_FEV
FROM SELLERS;

-- VALOR MINIMO DE UMA COLUNA
SELECT MIN(FEBRUARY) AS MIN_FEV
FROM SELLERS;

-- VALOR MÉDIO DE UMA COLUNA
SELECT AVG(FEBRUARY) AS MEDIA_FEV
FROM SELLERS;

-- VÁRIAS FUNÇÕES
SELECT MAX(JANUARY) AS MAX_JAN,
            MIN(JANUARY) AS MIN_JAN,
                  AVG(JANUARY) AS MEDIA_JAN
FROM SELLERS;

-- TRUNCATE
SELECT MAX(JANUARY) AS MAX_JAN,
            MIN(JANUARY) AS MIN_JAN,
                  TRUNCATE(AVG(JANUARY), 2) AS MEDIA_JAN
FROM SELLERS;

-- A30 AGREGANDO COM SUM()
SELECT SUM(JANUARY) AS TOTAL_JAN
FROM SELLERS;

SELECT SUM(JANUARY) AS TOTAL_JAN,
                  SUM(FEBRUARY) AS TOTAL_FEV,
                        SUM(MARCH) AS TOTAL_MARC
FROM SELLERS;

-- VENDAS POR SEXO
SELECT GENDER, 
            SUM(MARCH) AS TOTAL_MARC
FROM SELLERS
GROUP BY GENDER;

-- A31 SUBQUERIES

--VENDEDOR QUE VENDEU MENOS EM MARCO E O SEU NOME 
SELECT NAME, MARCH
FROM SELLERS
WHERE MARCH = (SELECT MIN(MARCH) -- INNER QUERY, 1º
FROM SELLERS);

-- NOME E O VALOR QUE VENDEU MAIS EM MARCO
SELECT NAME, MARCH
FROM SELLERS
WHERE MARCH=(SELECT MAX(MARCH)
FROM SELLERS);

-- QUEM VENDEU MAIS QUE O VALOR MEDIO DE FEV
SELECT NAME, MARCH
FROM SELLERS
WHERE MARCH > (SELECT AVG(MARCH)
FROM SELLERS);

SELECT NAME, FEBRUARY
FROM SELLERS
WHERE FEBRUARY > (SELECT AVG(FEBRUARY)
FROM SELLERS);

SELECT AVG(FEBRUARY)
FROM SELLERS;

SELECT NAME, FEBRUARY
FROM SELLERS
WHERE FEBRUARY < (SELECT AVG(FEBRUARY)
FROM SELLERS);


-- A32 OPERAÇÕES EM LINHA
SELECT NAME, 
            JANUARY,
                  FEBRUARY,
                        MARCH,
            (JANUARY+FEBRUARY+MARCH) AS "TOTAL",
                  TRUNCATE((JANUARY+FEBRUARY+MARCH)/3,2) AS "MÉDIA"
FROM SELLERS;

-- APPLICANDO %
SELECT NAME,
            JANUARY,
                  FEBRUARY,
                        MARCH,
            (JANUARY+FEBRUARY+MARCH) AS "TOTAL 2",
            (JANUARY+FEBRUARY+MARCH) * .25 AS "DESCONTO",
                  TRUNCATE ((JANUARY+FEBRUARY+MARCH)/3,2) AS "MÉDIA"
FROM SELLERS;
            
-- A33 ALTERANDO TABLEAS
CREATE TABLE TABLES (
      COLUMN1 VARCHAR(100)
);

-- ADD UMA PK
ALTER TABLE TABLES
ADD PRIMARY KEY(COLUMN1);

ALTER TABLE TABLES
ADD COLUMN2 INT;

-- ADD COLUNA COM POSIÇÃO
ALTER TABLE TABLES
ADD COLUMN COLUMN3 VARCHAR(100) NOT NULL UNIQUE
AFTER COLUMN2;

-- MODIFICANDO O TIPO DE UM CAMPO
ALTER TABLE TABLES
MODIFY COLUMN2 DATE NOT NULL;

-- RENOMEANDO NOME DA TABELA
ALTER TABLE TABLES2
RENAME PERSON;

CREATE TABLE TEAM(
      IDTEAM INT PRIMARY KEY AUTO_INCREMENT,
      TEAM VARCHAR(100),
      IDPERSON VARCHAR(100) 
);

ALTER TABLE TEAM
ADD FOREIGN KEY(IDPERSON)
REFERENCES PERSON(COLUMN1);

-- VERIFICANDO AS CHAVES
SHOW CREATE TABLE TEAM;

-- A34 ORGANIZAÇÃO DE CHAVES - CONSTRAINT
CREATE TABLE PLAYER (
      IDPLAYER INT PRIMARY KEY AUTO_INCREMENT,
      NAME VARCHAR(100)
);

CREATE TABLE TEAMS (
      IDTEAM INT PRIMARY KEY AUTO_INCREMENT,
      NAMETEAM VARCHAR(100),
      F_IDPLAYER INT,

      FOREIGN KEY(F_IDPLAYER)
      REFERENCES PLAYER(IDPLAYER)
);

INSERT INTO PLAYER VALUES(NULL,'GUERRERO');
INSERT INTO TEAMS VALUES(NULL,'FLAMENGO',1);

SHOW CREATE TABLE PLAYER;
SHOW CREATE TABLE TEAMS;

-- A35 ORGANIZANDO CHAVES
CREATE DATABASE BUSINESS3;

USE BUSINESS3;

CREATE TABLE CLIENT (
      IDCLIENT INT,
      NAME VARCHAR(100) NOT NULL
);

CREATE TABLE PHONE (
      IDPHONE INT, 
      TYPE CHAR(3) NOT NULL,
      NUMBER VARCHAR(20) NOT NULL,
      F_IDCLIENT INT
);
ALTER TABLE CLIENT
ADD CONSTRAINT PKCLIENT
PRIMARY KEY(IDCLIENT);

ALTER TABLE PHONE
ADD CONSTRAINT FKCLIENT_PHONE
FOREIGN KEY(F_IDCLIENT)
REFERENCES CLIENT(IDCLIENT);

-- DICIONÁRIO DE DADOS
USE INFORMATION_SCHEMA;

STATUS;

SHOW TABLES;

DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO",
            TABLE_NAME AS "TABELA",
                  CONSTRAINT_NAME AS "NOME REGRA",
                        CONSTRAINT_TYPE AS "TIPO"
FROM TABLE_CONSTRAINTS
WHERE CONSTRAINT_SCHEMA ="BUSINESS3";

-- APAGANDO CONSTRAINTS
USE BUSINESS3;

ALTER TABLE PHONE
DROP FOREIGN KEY FKCLIENT_PHONE;

ALTER TABLE PHONE 
ADD CONSTRAINT FKCLIENT_PHONE2
FOREIGN KEY (F_IDCLIENT)
REFERENCES CLIENT(IDCLIENT);

-- 36 AÇÕES DE CONSTRAINTS
SHOW TABLES;

INSERT INTO CLIENT VALUES(1,'RICARDO');
INSERT INTO CLIENT VALUES(2,'CLARA');
INSERT INTO CLIENT VALUES(3,'JULIO');
INSERT INTO CLIENT VALUES(4,'ANA');

INSERT INTO PHONE VALUES(10,'CEL','37834334',2);
INSERT INTO PHONE VALUES(20,'RES','67465656',2);
INSERT INTO PHONE VALUES(30,'CEL','88665645',1);
INSERT INTO PHONE VALUES(40,'RES','77543546',3);
INSERT INTO PHONE VALUES(50,'COM','75454675',1);
INSERT INTO PHONE VALUES(60,'CEL','76765455',4);

SELECT C.NAME, P.TYPE, P.NUMBER
FROM CLIENT C 
INNER JOIN PHONE P 
ON C.IDCLIENT=P.F_IDCLIENT;

-- ERRO DE REF
DELETE FROM CLIENT WHERE IDCLIENT=1;

-- CORREÇÃO
DELETE FROM PHONE
WHERE F_IDCLIENT=1;

DELETE FROM CLIENT 
WHERE IDCLIENT=1;

-- APAGANDO FOREIGN KEY
ALTER TABLE PHONE
DROP FOREIGN KEY FKCLIENT_PHONE2;

-- RECRIANDO FK

-- SET NULL / DELETE CASCADE

ALTER TABLE PHONE
ADD CONSTRAINT FKCLIENT_PHONE3
FOREIGN KEY(F_IDCLIENT)
REFERENCES CLIENT(IDCLIENT)
ON DELETE CASCADE;

SELECT C.NAME, P.TYPE, P.NUMBER
FROM CLIENT C
INNER JOIN PHONE P 
ON C.IDCLIENT=P.F_IDCLIENT;

DELETE FROM CLIENT
WHERE IDCLIENT=2;

ALTER TABLE PHONE DROP 
FOREIGN KEY FKCLIENT_PHONE3;

ALTER TABLE PHONE
ADD CONSTRAINT FKCLIENT_PHONE4
FOREIGN KEY(F_IDCLIENT)
REFERENCES CLIENT(IDCLIENT);
ON DELETE SET NULL;

SELECT NAME, TYPE, NUMBER
FROM CLIENT 
INNER JOIN PHONE
ON IDCLIENT=F_IDCLIENT;

-- A37 EX01
CREATE DATABASE BUSINESS4;

USE BUSINESS4;

-- A38 MODELO FÍSICO
CREATE TABLE CLIENT (
      IDCLIENT INT PRIMARY KEY AUTO_INCREMENT,
      NAME VARCHAR(100) NOT NULL,
      GENDER ENUM("F","M") NOT NULL,
      IDCAR INT UNIQUE
);

CREATE TABLE PHONE (
      IDPHONE INT PRIMARY KEY AUTO_INCREMENT,
      TYPE ENUM("CEL","RES,""COM") NOT NULL,
      NUMBER VARCHAR(100) NOT NULL,
      F_IDCLIENT INT
);

CREATE TABLE BRAND (
      IDBRAND INT PRIMARY KEY AUTO_INCREMENT,
      BRAND VARCHAR(100) UNIQUE
);

CREATE TABLE CAR(
      IDCAR INT PRIMARY KEY AUTO_INCREMENT,
      MODEL VARCHAR(100) NOT NULL,
      PLATE VARCHAR(100) NOT NULL UNIQUE,
      F_IDBRAND INT
);

CREATE TABLE COLOR(
      IDCOLOR INT PRIMARY KEY AUTO_INCREMENT,
      COLOR VARCHAR(100) UNIQUE
);

CREATE TABLE CAR_COLOR (
      IDCAR INT, 
      IDCOLOR INT,
      PRIMARY KEY(IDCAR, IDCOLOR)
);

-- ERREI COM NOMEAÇÃO, ERA F_IDCAR
ALTER TABLE CLIENT
CHANGE IDCAR F_IDCAR INT;

ALTER TABLE CAR_COLOR
CHANGE IDCAR F_IDCAR INT;

ALTER TABLE CAR_COLOR
CHANGE IDCOLOR F_IDCOLOR INT;

-- CONSTRAINTS
ALTER TABLE PHONE
ADD CONSTRAINT FKPHONE_CLIENT
FOREIGN KEY (F_IDCLIENT)
REFERENCES CLIENT(IDCLIENT);

ALTER TABLE CLIENT
ADD CONSTRAINT FKCLIENT_CAR
FOREIGN KEY(F_IDCAR)
REFERENCES CAR(IDCAR);

ALTER TABLE CAR
ADD CONSTRAINT FKCAR_BRAND
FOREIGN KEY(F_IDBRAND)
REFERENCES BRAND(IDBRAND);

ALTER TABLE CAR_COLOR
ADD CONSTRAINT FKCOLOR
FOREIGN KEY(F_IDCOLOR)
REFERENCES COLOR(IDCOLOR);

ALTER TABLE CAR_COLOR
ADD CONSTRAINT FKCAR
FOREIGN KEY(F_IDCAR)
REFERENCES CAR(IDCAR);

--PREENCHER O BANCO COM NO MINIMO 10 CLIENTES
INSERT INTO CLIENT VALUES(NULL,"JOÃO","M", 4);
INSERT INTO CAR VALUES(NULL,'');
INSERT INTO BRAND VALUES(NULL,'');

