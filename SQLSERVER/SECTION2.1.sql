-- ORGANIZAR FISICAMENTE E LOGICAMENTE UM BANCO DE DADOS

-- CAMINHO PARA CRIAÇÃO DE BD
"BOTÃO DIREITO EM 'BANCO DE DADOS' NOVO BANCO DE DADOS > GERAL 'NOME DO BANCO DE DADO', DEPOIS EM GRUPOS DE ARQUIVOS ADD GROUPOS QUE VÃO CONTER OS ARQUIVOS > 'ADCIONAR GRUPO DE ARQUIVOS" 

"VOLTANDO PRO GERAL > 'ARQUIVOS DE BANCO DE DADOS' > 'ADICIONAR' > NOMEAR 'MARKETING' E 'SALES' NO NOME LÓGICO"

"NO NOME DO ARQUIVO 'MARKETING.ndf' E 'SALES.ndf'"

"DEIXAR GRUPO DE ARQUIVOS DE MARKETING NO GA_MARKETING E SALES NO GRUPO DE GA_SALES"

"GERAL NO GRUPO DE GA_GERAL E NOME DO ARQUIVO GERAL.ndf"

-- COMEÇA AQUI
-- 1 CRIAR UM BANCO COM ARQUIVOS PARA OS SETORES MKT E RH
DATABASE BUSINESS
GO
-- 2 CRIAR ARQUIVO GERAL
GA_GERAL
-- 3 DEIXAR MDF APENAS COM O DICIONÁRIO DE DADOS
"DESMARCAR PADRÃO NO PRIMARY E MARCAR NO GA_GERAL"
-- 4 CRIAR DOIS GRUPOS DE ARQUIVOS
GA_SALES
GA_MARKETING

-- CONECTANDO À UM BANCO

USE BUSINESS
GO

-- C. TABELAS
CREATE TABLE STUDENT (
      IDSTUDENT INT PRIMARY KEY IDENTIFY,
      NAME VARCHAR(100) NOT NULL,
      GENDER CHAR(1) NOT NULL,
      BIRTH DATE NOT NULL,
      EMAIL VARCHAR(100) UNIQUE
)
GO

-- CONSTRAINTS
ALTER TABLE STUDENT
ADD CONSTRAINT CKGENDER
CHECK (GENDER IN ("F","M"))
GO

-- 1x1
CREATE TABLE ADDRESS (
      IDADDRESS INT PRIMARY KEY INDENTITY(100,10),
      DISTRICT VARCHAR(100),
      FU CHAR(2) NOT NULL
      CHECK (FU IN("RJ","SP","PR")),
      F_IDSTUDENT INT UNIQUE
)
GO

-- CRIANDO FK
ALTER TABLE ADDRESS
ADD CONSTRAINT FKADDRESS_STUDENT
FOREIGN KEY(F_IDSTUDENT)
REFENRECES STUDENT(IDSTUDENT)
GO

-- COMANDOS DE DESCRIÇÃO

-- PROCEDURES - JÁ CRIADAS E ARMAZENADAS NO SISTEMA

SP_COLUMNS STUDENT -- STORAGE PROCEDURES
GO

SP_HELP STUDENT
GO

-- INSERÇÃO DE DADOS - ALUNOS
INSERT INTO STUDENT VALUES('ANDRE','M','1981/12/09','ANDRE@IG.COM')
INSERT INTO STUDENT VALUES('ANA','F','1978/03/09','ANA@IG.COM')
INSERT INTO STUDENT VALUES('RUI','M','1951/07/09','RUI@IG.COM')
INSERT INTO STUDENT VALUES('JOAO','M','2002/11/09','JOAO@IG.COM')
GO

SELECT * FROM STUDENT
GO

-- ADDRESS
INSERT INTO ADDRESS VALUES('FLAMENGO','RJ',1)
INSERT INTO ADDRESS VALUES('MORUMBI','SP',2)
INSERT INTO ADDRESS VALUES('CENTRO','MG',4)
INSERT INTO ADDRESS VALUES('CENTRO','SP',6)
GO

-- PHONE 1xN
CREATE TABLE PHONE (
      IDPHONE INT PRIMARY KEY INDETITY,
      TYPE CHAR(3) NOT NULL
      CHECK (TYPE IN("RES","CEL", "COM")),
      NUMBER VARCHAR(20) NOT NULL,
      IDSTUDENT INT
)
GO


INSERT INTO PHONE VALUES('CEL','7899889',1)
INSERT INTO PHONE VALUES('RES','4325444',1)
INSERT INTO PHONE VALUES('COM','4354354',2)
INSERT INTO PHONE VALUES('CEL','2344556',2)
GO

SELECT * FROM PHONE
GO

-- DATA ATUAL
SELECT GETDATE()
GO

-- CLAUSÚLA AMBÍGUA
SELECT S.NAME, 
            P.TYPE, P.NUMBER, 
                  A.DISTRICT, A.FU
FROM STUDENT S LEFT JOIN PHONE P
ON S.IDSTUDENT = P.F_IDSTUDENT
INNER JOIN ADDRESS A
ON S.IDSTUDENT = A.F_IDSTUDENT
GO


-- IFNULL
SELECT S.NAME, 
            ISNULL(P.TYPE, "SEM TIPO") AS "TYPE",
            ISNULL(P.NUMBER, "SEM NÚMERO") AS "PHONE",
                  A.DISTRICT, A.FU
FROM STUDENT S LEFT JOIN ADDRESS A
ON S.IDSTUDENT=A.F_IDSTUDENT
INNER JOIN PHONE P
ON S.IDSTUDNET=P.F_IDSTUDENT
GO


-- DATAS
SELECT * FROM STUDENT
GO

SELECT NAME, BIRTH
FROM STUDENT
GO

-- DATAIFF - CALCULAR A DIFERENÇA ENTRE DUAS DATAS
-- FUNÇÃO GETDATE() TRAZ DIA E HORA

SELECT NAME, GETDATE() AS "DIA E HORA"
FROM STUDENT
GO

-- 1º
SELECT NAME, DATEIFF(DAY, BIRTH, GETDATE())
FROM STUDENT
GO

-- 2º
SELECT NAME, DATEDIFF(DAY, BIRTH,GETDATE()) AS "AGE 1"
FROM STUDENT
GO

-- 3º P. - RETORNO EM INTEIRO + OPERAÇÃO MATEMATICA
SELECT NAME, (DATEDIFF(DAY, BIRTH, GETDATE()/365) AS "AGE 2"
FROM STUDENT
GO

SELECT NAME, (DATEDIFF(MONTH, BIRTH, GETDATE())/12) AS "AGE 3"
FROM STUDENT
GO

SELECT NAME, DATEDIFF(YEAR, BIRTH, GETDATE()) AS "AGE 4"
FROM STUDENT
GO

-- DATENAME - TRAZ O NOME DA PARTE DA DATA EM QUESTÃO - STRING
SELECT NAME, DATENAME(MONTH, BIRTH)
FROM STUDENT
GO

SELECT NAME,DATENAME(YEAR, BIRTH)
FROM STUDENT
GO

SELECT NAME, DATENAME(WEEKDAY, BIRTH)
FROM STUDENT
GO

-- DATEPART - PORÉM O RETORNO É UM INTEIRO
SELECT NAME, DATEPART(MONTH, BIRTH), DATENAME(MONTH, BIRTH)
FROM STUDENT
GO

-- DATEADD - RETORNA UMA DATA SOMANDO A OUTRA DATA
SELECT DATEADD (DAY, 365,GETDATE())
SELECT DATEADD (YEAR, 10, GETDATE())

-- CONVERSÃO DE DADOS
SELECT 1 + "1"
GO

SELECT "1" + "1"
GO

SELECT "CURSO BANCO DE DADOS" + "1"
GO

SELECT "CURSO BANCO DE DADOS" + 1
GO

-- FUNÇÕES DE CONVERSÃO DE DADOS
SELECT CAST("1" AS INT) + CAST("1" AS INT))

-- CONVERSÃO E CONCATENAÇÃO - https://msdn.microsoft.com/en-us/library/ms191530.aspx


-- EXERCÍCIO
SELECT NAME,
            CAST(DAY(BIRTH) AS VARCHAR) + "/", 
                  CAST(MONTH(BIRTH) AS VARCHAR) + "/", 
                        CAST(YEAR(BIRTH) AS VARCHAR) AS BIRTH
FROM STUDENT
GO

-- CHARINDEX 
SELECT NAME, CHARINDEX("A", NAME) AS INDICE -- RETORNA INTEIRO. CONTAGEM DEFAULT - INICIA EM 1
FROM STUDENT
GO

SELECT NAME, CHARINDEX("A", NAME, 2) AS INDICE
FROM STUDENT
GO

-- BULK INSERT - IMPORTAÇÃO DE ARQUIVOS
CREATE TABLE ACCOUNT_LAUNCH (
      ACCOUNT INT, 
      PRICE INT,
      CD CHAR(1)
)
GO

SELECT ACCOUNT, VALUE, DEB_CRED
FROM ACCOUNTING_LAUNCH
GO

BULK INSERT ACCOUNTING_LAUNCH
FROM "'/home/dan92/Documentos/arcTxt/CONTAS.txt'"
WITH
(
      FIRSTROW=2,
      DATAFILETYPE="char",
      FIELDTERMINATOR="\t",
      ROWTERMINATOR="\n"
)

SELECT * FROM ACCOUNTING_LAUNCH
DELETE FROM ACCOUNTING_LAUNCH


-- DESAFIO DO SALDO 
-- QUERY QUE TRAGA O NUMERO DA CONTA SALDO - DEVEDOR OU CREDOR

SELECT ACCOUNT, PRICE,
CHARINDEX ("D", CD) AS DEBIT
CHARINDEX ("C", CD) AS CREDIT
CHARINDEX ("C", CD) * 2 - 1 AS MULTIPLICATOR
FROM ACCOUNT_LAUNCH
GO

SELECT ACCOUNT,
      SUM(PRICE * (CHARINDEX("C", CD) * 2 -1)) AS SALDO
FROM ACCOUNT_LAUNCH
GROUP BY ACCOUNT
GO

-- TRIGGERS
CREATE TABLE PRODUCTS(
      IDPRODUCT INT IDENTITY PRIMARY KEY,
      NAME VARCHAR(100) NOT NULL,
      CATEGORY VARCHAR(100) NOT NULL,
      PRICE NUMERIC(10,2) NOT NULL
)
GO
CREATE TABLE HISTORIC (
      IDOPERATION INT PRIMARY KEY IDENTITY,
      PRODUCT VARCHAR(50) NOT NULL,
      CATEGORY VARHCAR(100) NOT NULL,
      OLDPRICE NUMERIC(10,2) NOT NULL,
      NEWPRICE NUMERIC(10,2) NOT NULL,
      DATA DATETIME,
      USERS VARCHAR(100),
      MESSAGE VARCHAR(100)
)
GO

INSERT INTO PRODUCTS VALUES('LIVRO SQL SERVER','LIVROS',98.00)
INSERT INTO PRODUCTS VALUES('LIVRO ORACLE','LIVROS',50.00)
INSERT INTO PRODUCTS VALUES('LICEN�A POWERCENTER','SOFTWARES',45000.00)
INSERT INTO PRODUCTS VALUES('NOTEBOOK I7','COMPUTADORES',3150.00)
INSERT INTO PRODUCTS VALUES('LIVRO BUSINESS INTELLIGENCE','LIVROS',90.00)
GO

SELECT * FROM PRODUCTS
SELECT * FROM HISTORIC
GO

-- VERIFICANDO USUÁRIO
SELECT SUSER_NAME()
GO

-- TRIGGERS DE DADOS - DML
CREATE TRIGGER TRGATUALIZATION
ON DBO.PRODUCTS
FOR UPDATE
AS
      DECLARE @IDPRODUCT INT
      DECLARE @PRODUCT VARCHAR(100)
      DECLARE @CATEGORY VARCHAR(100)
      DELCARE @PRICE NUMERIC(10,2)
      DECLARE @NEWPRICE NUMERIC(10,2)
      DECLARE @DATA DATETIME
      DELCARE @USER VARCHAR(100)
      DECLARE @ACTION VARCHAR(100)

      -- PRIMEIRO BLOCO
      SELECT @IDPRODUCT = IDPRODUCT
      FROM inserted
      SELECT @PRODUCT = NAME
      FROM inserted
      SELECT @CATEGORY = CATEGORY
      FROM inserted
      SELECT @PRICE = PRICE
      FROM deleted
      SELECT @NEWPRICE = PRICE
      FROM inserted


      -- SEGUNDO BLOCO
      SET @DATA = GETDATE()
      SET @USER = SUSER_NAME()
      SET @ACTION ="VALOR INSERIDO PELA TRIGGE TRGATUALIZATION"

      INSERT INTO HISTORIC (PRODUCT, CATEGORY, OLDPRICE, NEWPRICE, DATA, USER, MESSAGE)
      VALUES (@PRODUCT, @CATEGORY,@PRICE, @NEWPRICE, @DATA,@USER, @ACTION)

      PRINT "TRIGGER EXECUTADA COM SUCESSO"
GO
